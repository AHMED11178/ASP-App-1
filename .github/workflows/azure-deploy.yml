name: Build, Test, Deploy to Azure

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:


permissions:
  id-token: write
  contents: read

env:
  AZURE_WEBAPP_NAME: 'ASPAPP'
  SLOT_NAME: 'staging'
  RESOURCE_GROUP: 'ASPAPP_group'
  DOTNET_VERSION: '8.0.x'
  WORKING_DIRECTORY: 'App' # Update if your solution is in a subfolder

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    # Checkout code
    - uses: actions/checkout@v4

    # Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # Restore dependencies
    - name: Restore dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: dotnet restore

    # Build
    - name: Build
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: dotnet build --configuration Release --no-restore

    # Run tests
    - name: Test
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: dotnet test --no-build --verbosity normal

    # Publish
    - name: Publish
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        dotnet publish \
          -c Release \
          -o ${{ github.workspace }}/publish \
          --no-build \
          -p:Version=1.0.${{ github.run_number }}

    # Azure Login
    - name: Login to Azure
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        allow-no-subscriptions: true

    # Deploy to staging slot
    - name: Deploy to Staging Slot
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: ${{ env.SLOT_NAME }}
        package: ${{ github.workspace }}/publish
        enable-oryx-build: false

    # Swap slots
    - name: Swap to Production
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "Starting swap with preview..."
          az webapp deployment slot swap \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --slot ${{ env.SLOT_NAME }} \
            --target-slot production \
            --action preview
          
          sleep 30 # Allow warm-up
          
          echo "Completing swap..."
          az webapp deployment slot swap \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --slot ${{ env.SLOT_NAME }} \
            --target-slot production \
            --action swap
          
          echo "Swap completed at $(date)"

    - name: Verify Production
      run: |
        # Configuration
        MAX_RETRIES=3
        RETRY_DELAY=10
        PROD_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
        
        echo "üîç Starting production verification for $PROD_URL"
        
        # Retry logic with exponential backoff
        for ((i=1; i<=$MAX_RETRIES; i++)); do
          echo "Attempt $i of $MAX_RETRIES"
          
          # Get both status code and full response (for debugging)
          RESPONSE_CODE=$(curl -s -o response.txt -w "%{http_code}" "$PROD_URL")
          RESPONSE_BODY=$(cat response.txt)
          
          # Verbose output for debugging
          echo "HTTP Response Code: $RESPONSE_CODE"
          echo "Response Body: $RESPONSE_BODY"
          
          if [ "$RESPONSE_CODE" -eq 200 ]; then
            echo "‚úÖ Production verification successful"
            exit 0
          fi
          
          # Special handling for 403 (common during warmup)
          if [ "$RESPONSE_CODE" -eq 403 ]; then
            echo "‚ö†Ô∏è Got 403 - Application may be warming up"
            az webapp restart --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}
          fi
          
          # Calculate next delay (exponential backoff)
          CURRENT_DELAY=$((RETRY_DELAY * i))
          echo "‚è≥ Retrying in $CURRENT_DELAY seconds..."
          sleep $CURRENT_DELAY
        done
        
        # If we get here, all retries failed
        echo "::error::Production verification failed after $MAX_RETRIES attempts"
        echo "üìú Fetching application logs for debugging..."
        az webapp log download --name ${{ env.AZURE_WEBAPP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --log-file "app_logs_$(date +%s).txt"
        exit 1